//
//  TADataTypes.h
//  ThreadAnalyzer
//
//  Created by Kalpesh Padia on 6/26/14.
//  Copyright (c) 2014 Yahoo! Inc. All rights reserved.
//

#ifndef ThreadAnalyzer_TADataTypes_h
#define ThreadAnalyzer_TADataTypes_h

#include <map>
#include <set>
#include <vector>
#include <stack>

using namespace std;

/*
    TACallInfo stores the instantaneous call information
    represented by each line in the input file.
 
    Members
    -------
        timestamp   : A timestamp generated by dtrace,
                        originating from an arbitary time 
                        in past, used to ensure correct 
                        chronological ordering of
                        call information
        
        tid         : Thread ID
        
        stackDepth  : Current depth of the call stack for
                        thread represented by tid
        
        objectAddress:Address of the object being accessed
                        on thread tid
        
        className   : Name of the class to which the object
                        belongs to 
        
        methodName  : The method being called by tid at
                        this instance
*/
struct TACallInfo
{
    unsigned long timestamp;
    unsigned long tid, stackDepth;
    string objectAddress, className, methodName;
};

/*  
    A pair of hash(string_representation_of_TAStack).
    Useful to identify if two similar stacks have
    appeared in a violation before. 
 */
typedef pair<size_t, size_t> TAHashPair;

typedef pair<string, TACallInfo> TAStackFrame;      //<object_on_top_of_stack, call_info_for_this_object>
typedef stack<TAStackFrame> TAStack;                //stack_of_TAStackFrames


extern map< string, set<unsigned long> > threadsWorkingOnObjects; //<object, set_of_all_threads_acting_on_this_object>
extern map<unsigned long, TAStack> threadStacks;                  //<threadID,  stack_for_this_thread>

extern set<unsigned long> threads;                  //set of all tids
extern set<string> objectAddresses;                 //set of all object addresses
extern set<string> violatingClasses;                //set of all classes that violate thread safety/other policy
extern set<string> functionWhiteList;               //set of all whitelisted functions
extern set<string> classnamesWhiteList;             //set of all whitelisted classes
extern set<string> classnamesSourceList;            //set of all class names appearing in the application source
extern set<TAHashPair> hashPairs;                   //set of all pairs of hashes observed

extern unsigned long rowCount;                      //number of rows in the output file

#endif
